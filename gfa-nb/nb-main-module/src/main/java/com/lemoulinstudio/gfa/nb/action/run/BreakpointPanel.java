package com.lemoulinstudio.gfa.nb.action.run;

import com.lemoulinstudio.gfa.analysis.Parser;
import com.lemoulinstudio.gfa.nb.GfaContext;
import com.lemoulinstudio.gfa.nb.filetype.rom.RomDataObject;
import com.lemoulinstudio.gfa.nb.filetype.rom.RomDataObject.StoppedState;
import java.awt.Color;
import javax.swing.JPanel;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;

/**
 *
 * @author vincent
 */
public class BreakpointPanel extends JPanel {

  private static BreakpointPanel instance = new BreakpointPanel();

  public static BreakpointPanel getInstance() {
    return instance;
  }

  private RomDataObject dataObject;
  private Lookup.Result stoppedStateResult;
  private final Color fgColor;

  /** Creates new form BreakpointPanel */
  private BreakpointPanel() {
    initComponents();

    fgColor = expressionTextField.getForeground();

    stoppedStateResult = GfaContext.getLookup().lookupResult(StoppedState.class);
    stoppedStateResult.addLookupListener(new LookupListener() {
      public void resultChanged(LookupEvent ev) {
        onEvent(GfaContext.getLookup().lookup(StoppedState.class));
      }
    });
    onEvent(GfaContext.getLookup().lookup(StoppedState.class));
  }

  private void onEvent(StoppedState stoppedState) {
    if (stoppedState != null) {
      dataObject = stoppedState.getRomDataObject();
      expressionTextField.setText(dataObject.getBreakpoint());
      expressionTextField.setEnabled(true);
    }
    else {
      dataObject = null;
      expressionTextField.setEnabled(false);
    }
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    expressionTextField = new javax.swing.JTextField();

    expressionTextField.setEnabled(false);
    expressionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        expressionTextFieldKeyTyped(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(expressionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(expressionTextField)
    );
  }// </editor-fold>//GEN-END:initComponents

    private void expressionTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expressionTextFieldKeyTyped
      parseField();
    }//GEN-LAST:event_expressionTextFieldKeyTyped
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField expressionTextField;
  // End of variables declaration//GEN-END:variables

  private void parseField() {
    String text = expressionTextField.getText();
    Parser parser = new Parser();

    if (parser.isValid(text)) {
      dataObject.setBreakpoint(text);
      expressionTextField.setForeground(fgColor);
    }
    else {
      dataObject.setBreakpoint("#f");
      expressionTextField.setForeground(Color.RED);
    }
  }
}
