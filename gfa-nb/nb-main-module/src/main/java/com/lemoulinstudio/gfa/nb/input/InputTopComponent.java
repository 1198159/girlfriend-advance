/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lemoulinstudio.gfa.nb.input;

import com.lemoulinstudio.gfa.core.memory.IORegisterSpace_8_16_32;
import com.lemoulinstudio.gfa.nb.GfaContext;
import com.lemoulinstudio.gfa.nb.filetype.rom.RomDataObject;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;

/**
 * Top component which displays something.
 */
public final class InputTopComponent extends TopComponent {

  private static InputTopComponent instance;
  /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
  private static final String PREFERRED_ID = "InputTopComponent";

  private Lookup.Result romDataObjectResult;
  private ItemListener itemListener;
  private RomDataObject dataObject;

  public InputTopComponent() {
    initComponents();
    setName(NbBundle.getMessage(InputTopComponent.class, "CTL_InputTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    itemListener = new MyItemListener();

    upPad.addItemListener(itemListener);
    downPad.addItemListener(itemListener);
    leftPad.addItemListener(itemListener);
    rightPad.addItemListener(itemListener);
    selectPad.addItemListener(itemListener);
    startPad.addItemListener(itemListener);
    aPad.addItemListener(itemListener);
    bPad.addItemListener(itemListener);
    lPad.addItemListener(itemListener);
    rPad.addItemListener(itemListener);
    
    romDataObjectResult = GfaContext.getLookup().lookupResult(RomDataObject.class);
    romDataObjectResult.addLookupListener(new LookupListener() {
      public void resultChanged(LookupEvent ev) {
        onEvent(GfaContext.getLookup().lookup(RomDataObject.class));
      }
    });
    onEvent(GfaContext.getLookup().lookup(RomDataObject.class));
  }

  @Override
  public Lookup getLookup() {
    return GfaContext.getLookup();
  }

  private void onEvent(RomDataObject dataObject) {
    this.dataObject = dataObject;

    short keys = 0x03ff;
    if (dataObject != null && dataObject.isDeviceCreated())
        keys = ((IORegisterSpace_8_16_32) dataObject.getGfaDevice().getMemory().getMemoryBank(0x04)).getReg16(0x0130);

    aPad.setSelected(     (keys & 0x0001) == 0);
    bPad.setSelected(     (keys & 0x0002) == 0);
    selectPad.setSelected((keys & 0x0004) == 0);
    startPad.setSelected( (keys & 0x0008) == 0);
    rightPad.setSelected( (keys & 0x0010) == 0);
    leftPad.setSelected(  (keys & 0x0020) == 0);
    upPad.setSelected(    (keys & 0x0040) == 0);
    downPad.setSelected(  (keys & 0x0080) == 0);
    rPad.setSelected(     (keys & 0x0100) == 0);
    lPad.setSelected(     (keys & 0x0200) == 0);
  }

  private class MyItemListener implements ItemListener {
    public void itemStateChanged(ItemEvent e) {
      short keys = (short)
       ~((aPad.isSelected() ?      0x0001 : 0) |
         (bPad.isSelected() ?      0x0002 : 0) |
         (selectPad.isSelected() ? 0x0004 : 0) |
         (startPad.isSelected() ?  0x0008 : 0) |
         (rightPad.isSelected() ?  0x0010 : 0) |
         (leftPad.isSelected() ?   0x0020 : 0) |
         (upPad.isSelected() ?     0x0040 : 0) |
         (downPad.isSelected() ?   0x0080 : 0) |
         (rPad.isSelected() ?      0x0100 : 0) |
         (lPad.isSelected() ?      0x0200 : 0));

      if (dataObject != null && dataObject.isDeviceCreated()) {
        IORegisterSpace_8_16_32 ioMem = (IORegisterSpace_8_16_32) dataObject.getGfaDevice().getMemory().getMemoryBank(0x04);
        ioMem.setReg16(0x0130, keys);
      }
    }
  };

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    enableInputCheckBox = new javax.swing.JCheckBox();
    inputPanel = new javax.swing.JPanel();
    upPad = new javax.swing.JCheckBox();
    downPad = new javax.swing.JCheckBox();
    leftPad = new javax.swing.JCheckBox();
    rightPad = new javax.swing.JCheckBox();
    selectPad = new javax.swing.JCheckBox();
    startPad = new javax.swing.JCheckBox();
    aPad = new javax.swing.JCheckBox();
    bPad = new javax.swing.JCheckBox();
    lPad = new javax.swing.JCheckBox();
    rPad = new javax.swing.JCheckBox();

    enableInputCheckBox.setSelected(true);
    org.openide.awt.Mnemonics.setLocalizedText(enableInputCheckBox, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.enableInputCheckBox.text")); // NOI18N
    enableInputCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        enableInputCheckBoxStateChanged(evt);
      }
    });

    inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

    org.openide.awt.Mnemonics.setLocalizedText(upPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.upPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(downPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.downPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(leftPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.leftPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(rightPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.rightPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(selectPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.selectPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(startPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.startPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(aPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.aPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(bPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.bPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.lPad.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(rPad, org.openide.util.NbBundle.getMessage(InputTopComponent.class, "InputTopComponent.rPad.text")); // NOI18N

    javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
    inputPanel.setLayout(inputPanelLayout);
    inputPanelLayout.setHorizontalGroup(
      inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(inputPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(upPad)
          .addComponent(downPad)
          .addComponent(leftPad)
          .addComponent(rightPad)
          .addComponent(selectPad)
          .addComponent(startPad)
          .addComponent(aPad)
          .addComponent(bPad)
          .addComponent(lPad)
          .addComponent(rPad))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    inputPanelLayout.setVerticalGroup(
      inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(inputPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(upPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(downPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(leftPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(rightPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(selectPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(startPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(aPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(bPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(lPad)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(rPad)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(enableInputCheckBox))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(enableInputCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void enableInputCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enableInputCheckBoxStateChanged
    inputPanel.setEnabled(enableInputCheckBox.isEnabled());
  }//GEN-LAST:event_enableInputCheckBoxStateChanged
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox aPad;
  private javax.swing.JCheckBox bPad;
  private javax.swing.JCheckBox downPad;
  private javax.swing.JCheckBox enableInputCheckBox;
  private javax.swing.JPanel inputPanel;
  private javax.swing.JCheckBox lPad;
  private javax.swing.JCheckBox leftPad;
  private javax.swing.JCheckBox rPad;
  private javax.swing.JCheckBox rightPad;
  private javax.swing.JCheckBox selectPad;
  private javax.swing.JCheckBox startPad;
  private javax.swing.JCheckBox upPad;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized InputTopComponent getDefault() {
    if (instance == null) {
      instance = new InputTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the InputTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized InputTopComponent findInstance() {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(InputTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof InputTopComponent) {
      return (InputTopComponent) win;
    }
    Logger.getLogger(InputTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  @Override
  public int getPersistenceType() {
    return TopComponent.PERSISTENCE_ALWAYS;
  }

  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  Object readProperties(java.util.Properties p) {
    if (instance == null) {
      instance = this;
    }
    instance.readPropertiesImpl(p);
    return instance;
  }

  private void readPropertiesImpl(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  protected String preferredID() {
    return PREFERRED_ID;
  }
}
