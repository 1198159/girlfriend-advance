package com.lemoulinstudio.gfa.nb.disasm;

import com.lemoulinstudio.gfa.core.GfaDevice;
import com.lemoulinstudio.gfa.core.cpu.Arm7Tdmi;
import com.lemoulinstudio.gfa.core.cpu.ExecutionState;
import com.lemoulinstudio.gfa.nb.GfaContext;
import com.lemoulinstudio.gfa.nb.filetype.rom.RomDataObject.StoppedState;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
public final class DisassemblerTopComponent extends TopComponent {

  private static DisassemblerTopComponent instance;
  /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
  private static final String PREFERRED_ID = "DisassemblerTopComponent";

  private GfaDevice device;
  private ComboBoxModel executionStateComboBoxModel;
  private ComboBoxModel memoryBankComboBoxModel;
  private ComboBoxModel programTrackingComboBoxModel;
  private DisassemblerTable disassemblerTable;

  private Lookup.Result stoppedStateResult;

  private DisassemblerTopComponent() {
    associateLookup(GfaContext.getLookup());

    executionStateComboBoxModel = new DefaultComboBoxModel(ExecutionState.values());
    memoryBankComboBoxModel = new DefaultComboBoxModel(MemoryBank.values());
    programTrackingComboBoxModel = new DefaultComboBoxModel(ProgramTrackingPolicy.values());
    disassemblerTable = new DisassemblerTable();

    initComponents();

    disassemblerTable.setParentScrollPane(jScrollPane);
    memoryBankComboBox.setSelectedItem(MemoryBank.GamepackRom);
    programTrackingComboBox.setSelectedItem(ProgramTrackingPolicy.Windowed);
    
    setName(NbBundle.getMessage(DisassemblerTopComponent.class, "CTL_DisassemblerTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

    stoppedStateResult = GfaContext.getLookup().lookupResult(StoppedState.class);
    stoppedStateResult.addLookupListener(new LookupListener() {
      public void resultChanged(LookupEvent ev) {
        onEvent(GfaContext.getLookup().lookup(StoppedState.class));
      }
    });
    onEvent(GfaContext.getLookup().lookup(StoppedState.class));
  }

  private void onEvent(StoppedState stoppedState) {
    device = (stoppedState == null ? null : stoppedState.getRomDataObject().getGfaDevice());
    disassemblerTable.setGfaDevice(device);
    goHome();
  }

  private void goHome() {
    if (device != null) {
      Arm7Tdmi cpu = device.getCpu();
      executionStateComboBox.setSelectedItem(cpu.getExecutionState());
      memoryBankComboBox.setSelectedItem(MemoryBank.getPhysicalMemoryBank(cpu.PC.get() >>> 24));
      disassemblerTable.trackInstructionPointer();
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    memoryBankComboBox = new javax.swing.JComboBox();
    programTrackingComboBox = new javax.swing.JComboBox();
    javax.swing.JLabel memoryBankLabel = new javax.swing.JLabel();
    javax.swing.JLabel executionTrackingLabel = new javax.swing.JLabel();
    javax.swing.JLabel cpuModeLabel = new javax.swing.JLabel();
    executionStateComboBox = new javax.swing.JComboBox();
    homeButton = new javax.swing.JButton();
    jScrollPane = new javax.swing.JScrollPane();
    javax.swing.JTable jTable = disassemblerTable;

    memoryBankComboBox.setModel(memoryBankComboBoxModel);
    memoryBankComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        memoryBankComboBoxActionPerformed(evt);
      }
    });

    programTrackingComboBox.setModel(programTrackingComboBoxModel);
    programTrackingComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        programTrackingComboBoxActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(memoryBankLabel, org.openide.util.NbBundle.getMessage(DisassemblerTopComponent.class, "DisassemblerTopComponent.memoryBankLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(executionTrackingLabel, org.openide.util.NbBundle.getMessage(DisassemblerTopComponent.class, "DisassemblerTopComponent.executionTrackingLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(cpuModeLabel, org.openide.util.NbBundle.getMessage(DisassemblerTopComponent.class, "DisassemblerTopComponent.cpuModeLabel.text")); // NOI18N

    executionStateComboBox.setModel(executionStateComboBoxModel);
    executionStateComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        executionStateComboBoxActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(homeButton, org.openide.util.NbBundle.getMessage(DisassemblerTopComponent.class, "DisassemblerTopComponent.homeButton.text")); // NOI18N
    homeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        homeButtonActionPerformed(evt);
      }
    });

    jScrollPane.setViewportView(jTable);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(cpuModeLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(executionStateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(memoryBankLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(memoryBankComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(executionTrackingLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(programTrackingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
        .addComponent(homeButton)
        .addContainerGap())
      .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cpuModeLabel)
          .addComponent(executionStateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(memoryBankLabel)
          .addComponent(memoryBankComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(executionTrackingLabel)
          .addComponent(programTrackingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(homeButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void memoryBankComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryBankComboBoxActionPerformed
    disassemblerTable.setMemoryBank((MemoryBank) memoryBankComboBoxModel.getSelectedItem());
  }//GEN-LAST:event_memoryBankComboBoxActionPerformed

  private void programTrackingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programTrackingComboBoxActionPerformed
    disassemblerTable.setProgramTrackingPolicy((ProgramTrackingPolicy) programTrackingComboBoxModel.getSelectedItem());
  }//GEN-LAST:event_programTrackingComboBoxActionPerformed

  private void executionStateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executionStateComboBoxActionPerformed
    disassemblerTable.setExecutionState((ExecutionState) executionStateComboBoxModel.getSelectedItem());
  }//GEN-LAST:event_executionStateComboBoxActionPerformed

  private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
    goHome();
  }//GEN-LAST:event_homeButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox executionStateComboBox;
  private javax.swing.JButton homeButton;
  private javax.swing.JScrollPane jScrollPane;
  private javax.swing.JComboBox memoryBankComboBox;
  private javax.swing.JComboBox programTrackingComboBox;
  // End of variables declaration//GEN-END:variables
  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized DisassemblerTopComponent getDefault() {
    if (instance == null) {
      instance = new DisassemblerTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the DisassemblerTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized DisassemblerTopComponent findInstance() {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(DisassemblerTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof DisassemblerTopComponent) {
      return (DisassemblerTopComponent) win;
    }
    Logger.getLogger(DisassemblerTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  @Override
  public int getPersistenceType() {
    return TopComponent.PERSISTENCE_ALWAYS;
  }

  @Override
  protected String preferredID() {
    return PREFERRED_ID;
  }

}
